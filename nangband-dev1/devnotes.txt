Developer Notes
===============

This is a place designed for developer discussion.  Comment at
appropriate places.

2: New method to enchant
------------------------
Here's a cut-n-paste from #angband:

<takkaria> parody; I'm thinking about allowing scrolls of enchant
armour/to-hit/to-dam to work on anything which can have those bonuses...
<takkaria> parody; so an amulet of slaying can have to-hit/to-dam scrolls
read on it
<parody> takk, an additional type for these?
<parody> takk, perhaps they should be deeper/rarer/more expensive as well...
<parody> you have the standard armor/weapon enchantment scrolls, and
a special type for adding armor or combat bonuses to misc. equipment

<_458_jir> how about adding 'enchant' to chance of destroying the item?
<_458_jir> you can enchant till +15 in place of +9, with risk of destroying it

<takkaria> I had the following plan ages ago:
<takkaria> Rewrite enchant() to work on forumulas instead of a table. 
<takkaria> Also change it so it gets harder to enchant to-dam as you get
<takkaria> nearer the maximum damage the weapon can do.  So a 1d4 dagger
<takkaria> is easy to get +1 dam, fairly easy to get +2 dam, fairly hard
<takkaria> to get +3 dam, and hard to get +4 dam.
<takkaria> [end]
<_458_jir> Scroll of enchant amulet To-Dam?
<takkaria> scroll of Equipment Enhancement, maybe
<takkaria> so you'd have to have seperate scrolls if I ever did the above
<parody> something of that nature...
that would allow you to add combat bonuses to something like belts...

--moose-- a decent name will be fun to come up with :)  other than
that, what do people think of this?


1: Behaviour of new monster lighting
------------------------------------
ABSORB_LIGHT monsters will absorb nearby light, reducing the practical
radius of the light to 0.

EMANATE_LIGHT monsters emit light; radius should be 2 or 3, depending on
level.

CARRY_LIGHT monsters are theoretically "carrying" light sources, which
should be radius 1 or 2, depending on level; probably, the transition
shouldn't occur much later than dungeon level 15.

--MS-- Could this light source be dropped or somehow run out?

--GW-- well if a basic monster inventory could be created this could
done, however the balancing issues would be pretty major. Of course
if we are to make this variant truely different then this could be an
interesting way of doing it. Another way could be to add lines into
the info files for the monsters to specify some generic drop types
I suppose themed drops would be more accurate, in fact I think this
has been done in other variants, but I'm not too sure how successfully
though. The main problem with the second idea is that the light source
wouldn't 'exist' until the creature is killed and therefore would be
more difficult to make run out in a nice way.

--MS-- Hmm. That takes in a completely differant direction than I had
originally intended (not a bad thing at all ;).  I will attempt to clarify
what I was thinking when I made that comment.  My idea of dropping, in
this case, was merely the monster losing their source of light. The light
source running out would achieve the same goal. This would be in contrast
to the monsters which emanate light; who either inherently emit light
from their bodies, or somehow have a light source (most likely magical in
nature).  Even these monsters could lose their source of light, but it
would take much more to affect them.  Perhaps a critical hit, or certain
spells could cause a monster carrying a light to drop it, whereas one
that emanates light would find that his light source becomes weaker as
his life force declines. Their light could shrink in radius,
proportionately with their hitpoints, possibly even affecting how they
interact with ABSORB_LIGHT monsters...

--moose-- Interesting.  I like the idea; in my last attempt at doing
monster light (which was in Elasticband, which is long dead now), monsters
did drop torches; this tended to get somewhat annoying.  I'm pondering over
implementing something like ARFC003 - Autodumper.
http://everything.vaevictus.net/?node=Autodumper+ARFC+003 contains details
on it; with it, there wouldn't be as much tedium with monsters dropping
lights, or even themed drops.
[note to moose: remember to go through the todo list again sometime soon]

--MS-- About monster inventories. I love the idea, and i think any steps
taken towards it would be well worth it.  Generic or themed drops would
be a good way to implement them cleanly and relatively quickly.  A good
place to start might be with uniques.  Giving a couple deep uniques set
drops, mostly in artifact form, would be a good step towards a full system.
And furthermore, it would be able to hold it's own as a feature, even if that
is as far as we take the concept. A more comprehensive system would be more
trouble than it is worth at this point in time, but something that should
definately not be ruled out.  I think it will be difficult to implement
this because a "real" monster inventory system would be one that allows
the monster access to it's inventory and the benefits that it would
receive from them.

--moose-- see above.

If an ABSORB_LIGHT monster is in the vicinity of a [CARRY|EMANATE]_LIGHT
monster, the priority of effects is EMANATE_LIGHT, ABSORB_LIGHT and then
CARRY_LIGHT.  CARRY_LIGHT monsters may be scared by the absence of
light, and may try to get away.

--GW-- hmm, if a monster with [EMANATE|CARRY]_LIGHT has no other way of
seeing in the dark (ie infra_vision, esp, etc) then maybe they would
fear being in the dark, or maybe ,if they do have an alternate sense,
the may just merely be slightly more timid and not all out scared.

--MS-- ABSORB_LIGHT monster could also possibly be afraid of EMANATE_LIGHT
monsters.

--GW-- see above

--pel^2-- This light priority rule would require three m_list loops
(lighting for CARRY_LIGHT, darkening for ABSORB_LIGHT, followed by lighting
for EMANATE_LIGHT), all using Z's fairly complicated multiple radii code.
It can be done, but I wonder how practical it is. CPUs are faster than
necessary these days, though. And if you don't like players to see
through darkness created by ABSORB_LIGHT monsters, we have to rewrite
update_view() as well, that means very substantial amount of work...

--moose-- I think that the amount of work required it worth it.  It would add
another element to the game, which is atmosphere.  Some of it may have to be
optional, though; maybe have view_monster_light which just does monster lighting
and absorbing, then have monster_light_complex or whatever to do the different
loops for each one. 

--pel^2-- Here's the outline of a light priority code
Prerequisites:
+ CAVE2_MDARK for cave_info2.
+ Another CAVE_TEMP flag, maybe called CAVE2_TEMP.

Outline:
+ Monster-lit grids are marked with CAVE_TEMP and monster-darkened ones
  CAVE2_TEMP.
+ Remove CAVE2_MLIGHT and CAVE2_MDARK flags from light_g grids, while
  dropping CAVE_SEEN from grids illuminated only by monster light sources,
  adding CAVE_SEEN from CAVE_GLOW grids darkened by monster darkness.
+ Scan through m_list, rejecting those with cdis > MAX_SIGHT + 3 and
  those who don't have lighting flags set. Store their positions,
  light/darkness radii and light priority in a temporary array.
+ (Important) Sort the temporary array by light priority.
+ Process the sorted just like update_monster_light now handles m_list.
+ Because the current code avoids overwriting already affected grids,
  this should eliminate the possibility of light/temp array overflow
  and handle lighting priority correctly, i.e. 
  if (info2 & (CAVE2_MLIGHT | CAVE2_MDARK)) continue;
  For EMANATE_LIGHT and CARRY_LIGHT it sets CAVE2_MLIGHT and CAVE_SEEN.
  For ABSORB_LIGHT, it sets CAVE2_MLIGHT and clears CAVE_SEEN (unless
  CAVE2_PLIGHT is set? I'm not sure).
+ Double the number of conditions in the redraw code in update_monster_light,
  to handle the effects of CAVE2_TEMP and CAVE2_MDARK.
+ In update_view, add "&& !(info2 & (CAVE2_MDARK))" whenever it checks
  CAVE_GLOW.
