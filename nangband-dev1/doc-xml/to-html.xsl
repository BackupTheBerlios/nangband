<?xml version="1.0"?>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html"/>
<xsl:output doctype-public="-//W3C//DTD HTML 4.0 Translational//EN"/>
<xsl:output indent="yes"/>
<xsl:output encoding="UTF-8"/>

<xsl:param name="trans">off</xsl:param>

<xsl:template match="ahml">
<html>
<xsl:comment>This file is automatically generated.  Do not edit!</xsl:comment>
<xsl:apply-templates/>
</html>
</xsl:template>

<xsl:template match="title">
<head>
<title>
<xsl:apply-templates/>
</title>
</head>
</xsl:template>

<xsl:template match="body">
<body bgcolor="#FFFFFF" text="#000000"> 
<xsl:apply-templates/>
</body>
</xsl:template>

<xsl:template match="table">
<table cellpadding="10">

<xsl:if test="@align">
	<xsl:attribute name="align">
	<xsl:apply-templates select="@align"/>
	</xsl:attribute>
</xsl:if>

<xsl:if test="@rules">
	<xsl:attribute name="rules">
	<xsl:apply-templates select="@rules"/>
	</xsl:attribute>
</xsl:if>

<xsl:if test="@width">
	<xsl:attribute name="width">
	<xsl:apply-templates select="@width"/>
	</xsl:attribute>
</xsl:if>

<xsl:apply-templates/>
</table>
</xsl:template>

<xsl:template match="row">
<tr>
<xsl:attribute name="valign">top</xsl:attribute>
<xsl:apply-templates/>
</tr>
</xsl:template>

<xsl:template match="pre">
<pre>
<xsl:apply-templates/>
</pre>
</xsl:template>

<xsl:template match="cell">
<td>
<xsl:if test="@align">
	<xsl:attribute name="align">
	<xsl:apply-templates select="@align"/>
	</xsl:attribute>
</xsl:if>
<xsl:if test="@width">
	<xsl:attribute name="width">
	<xsl:apply-templates select="@width"/>
	</xsl:attribute>
</xsl:if>
<xsl:apply-templates/>
</td>
</xsl:template>

<xsl:template match="list">
<xsl:choose>
<xsl:when test="@type='-'">
<xsl:call-template name="listtag">
<xsl:with-param name="format">ul</xsl:with-param>
</xsl:call-template>
</xsl:when>
<xsl:when test="@type">
<xsl:call-template name="listtag">
<xsl:with-param name="format">ol</xsl:with-param>
</xsl:call-template>
</xsl:when>
<xsl:otherwise>
<xsl:call-template name="listtag">
<xsl:with-param name="format">ul</xsl:with-param>
</xsl:call-template>
</xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template name="listtag">
	<xsl:param name="format"/>

	<!-- element either <ul> or <ol> -->
	<xsl:element name="{$format}">

		<!-- if the type attribute exists -->
		<xsl:if test="@type">
			<!-- make a result type attribute -->
			<xsl:attribute name="type">
				<!-- with the specified type -->
				<xsl:apply-templates select="@type"/>
			</xsl:attribute>
		</xsl:if>

		<!-- if the compact attribute is on, output a compact in the result -->
		<xsl:if test="@compact='yes'"><xsl:attribute name="compact"/></xsl:if>
		<xsl:if test="@compact='true'"><xsl:attribute name="compact"/></xsl:if>

		<!-- if the start attribute is on, output a start in the result -->
		<xsl:if test="@start">
			<xsl:attribute name="start">
				<!-- with the specified number -->
				<xsl:apply-templates select="@start"/>
			</xsl:attribute>
		</xsl:if>

		<xsl:apply-templates/>
	</xsl:element>
</xsl:template>

<xsl:template match="item">
<li>
<xsl:apply-templates/>
</li>
</xsl:template>

<xsl:template match="p">
<p><xsl:apply-templates/></p>
</xsl:template>

<xsl:template match="h1">
<h2>
<xsl:attribute name="align">
<xsl:choose>
<xsl:when test="@align">
	<xsl:apply-templates select="@align"/>
</xsl:when>
<xsl:otherwise>centre</xsl:otherwise>
</xsl:choose>
</xsl:attribute>
<xsl:apply-templates/>
</h2>
</xsl:template>

<xsl:template match="h2">
<h3>
<xsl:if test="@align">
	<xsl:attribute name="align">
	<xsl:apply-templates select="@align"/>
	</xsl:attribute>
</xsl:if>
<xsl:apply-templates/>
</h3>
</xsl:template>

<xsl:template match="h3">
<h4>
<xsl:if test="@align">
	<xsl:attribute name="align">
	<xsl:apply-templates select="@align"/>
	</xsl:attribute>
</xsl:if>
<xsl:apply-templates/>
</h4>
</xsl:template>

<xsl:template match="colour | color">
<font>
<xsl:attribute name="color">
<xsl:choose>
	<xsl:when test="@name='dark'">#000000</xsl:when>
	<xsl:when test="@name='white'">#FFFFFF</xsl:when>
	<xsl:when test="@name='slate'">#7E7E7E</xsl:when>
	<xsl:when test="@name='orange'">#FF7E00</xsl:when>
	<xsl:when test="@name='red'">#BF0000</xsl:when>
	<xsl:when test="@name='green'">#007E3F</xsl:when>
	<xsl:when test="@name='blue'">#0000FF</xsl:when>
	<xsl:when test="@name='umber'">#7E3F00</xsl:when>
	<xsl:when test="@name='lightdark'">#3F3F3F</xsl:when>
	<xsl:when test="@name='lightwhite'">#BFBFBF</xsl:when>
	<xsl:when test="@name='violet'">#FF00FF</xsl:when>
	<xsl:when test="@name='yellow'">#FFFF00</xsl:when>
	<xsl:when test="@name='lightred'">#FF0000</xsl:when>
	<xsl:when test="@name='lightgreen'">#00FF00</xsl:when>
	<xsl:when test="@name='lightblue'">#00FFFF</xsl:when>
	<xsl:when test="@name='lightumber'">#BF7E3F</xsl:when>
</xsl:choose>
</xsl:attribute>

<xsl:apply-templates/>
</font>
</xsl:template>

<xsl:template match="link">
<a>
<xsl:if test="@id">        
	<xsl:attribute name="name">
	<xsl:apply-templates select="@id"/>
	</xsl:attribute>
</xsl:if>

<xsl:choose>
	<xsl:when test="@file">
	<xsl:choose>
		<xsl:when test="$trans='on'">
			<xsl:variable name="branch" select="substring-before(@file,'.')" />
			<xsl:variable name="hash" select="substring-after(@file,'#')" />
			<xsl:attribute name="href">
			<xsl:if test="not($branch='')"><xsl:value-of select="$branch" />.html</xsl:if>   
			<xsl:if test="not($hash='')">#<xsl:value-of select="$hash" /></xsl:if>
			</xsl:attribute>
		</xsl:when>  
		<xsl:when test="$trans='off'">
			<xsl:attribute name="href"><xsl:value-of select="@file" /></xsl:attribute>
		</xsl:when>
	</xsl:choose>
	</xsl:when>

	<xsl:when test="@action='back'"> 
		<xsl:attribute name="href">#</xsl:attribute>  
		<xsl:attribute name="onClick">history.go(-1)</xsl:attribute>
	</xsl:when>
</xsl:choose>
<xsl:apply-templates/>
</a>
</xsl:template>

<xsl:template match="strong">
<strong>
<xsl:apply-templates/>
</strong>
</xsl:template>

<xsl:template match="em">
<em>
<xsl:apply-templates/>
</em>
</xsl:template>

<xsl:template match="br">
<br />
</xsl:template>

<xsl:template match="hr">
<hr>
<xsl:if test="@align">
	<xsl:attribute name="align">
	<xsl:apply-templates select="@align"/>
	</xsl:attribute>
</xsl:if>

<xsl:if test="@width">
	<xsl:attribute name="width">
	<xsl:apply-templates select="@width"/>
	</xsl:attribute>
</xsl:if>
</hr>
</xsl:template>

<!-- underline can't be mapped directly to HTML -->

<!-- err shouldn't be mapped to HTML at all -->

</xsl:stylesheet>
