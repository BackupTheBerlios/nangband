# File: Makefile.std
#
# Abstract: A simple makefile designed for *nix systems.
#
# Detail:
# You may have to make modifications for your own, personal system.
# This makefile currently supports the GTK, X11, (n)curses, termcap, VT100, Slang,
# amd Linux VCS/SVGA visual modules.
#
# Note that main-mac.c, main-win.c, main-ibm.c, main-dos.c and main-emx.c 
# must be all be compiled in a special way.
#
# main-ros.c and main-ami.c need to use their own, special, makefiles.
#
# If you are able to construct "main-xxx.c" and/or "Makefile.xxx"
# files for a currently unsupported system, please send them to
# Robert Ruehlmann <rr9@angband.org> for inclusion in future versions.

LUAOBJS = \
	lua/lapi.o lua/ldebug.o lua/lmem.o lua/lstrlib.o lua/lvm.o \
	lua/tolua_lb.o lua/lauxlib.o lua/ldo.o lua/lobject.o lua/ltable.o \
	lua/lzio.o lua/tolua_rg.o lua/lbaselib.o lua/lfunc.o lua/lparser.o \
	lua/ltests.o lua/tolua_bd.o lua/tolua_tm.o lua/lcode.o lua/lgc.o \
	lua/lstate.o lua/ltm.o lua/tolua_eh.o lua/tolua_tt.o lua/ldblib.o \
	lua/llex.o lua/lstring.o lua/lundump.o lua/tolua_gp.o

TOLUAOBJS = \
	lua/tolua.o lua/tolualua.o lua/liolib.o $(LUAOBJS)

BORGOBJS = \
	borg1.o borg2.o borg3.o borg4.o borg5.o borg6.o borg7.o borg8.o borg9.o

ANGOBJS = \
	z-util.o z-virt.o z-form.o z-rand.o z-term.o \
	variable.o tables.o util.o cave.o \
	object1.o object2.o monster1.o monster2.o \
	xtra1.o xtra2.o spells1.o spells2.o \
	melee1.o melee2.o save.o files.o \
	cmd1.o cmd2.o cmd3.o cmd4.o cmd5.o cmd6.o \
	resist.o interface.o running.o \
	help.o xmlbulp.o \
	store.o birth.o \
	wizard1.o wizard2.o \
	generate.o dungeon.o init1.o init2.o randart.o \
	main-cap.o main-gcu.o main-x11.o main-xaw.o main-win.o main.o \
	main-gtk.o main-lsl.o main-sla.o main-vcs.o main-xpj.o maid-x11.o \
	script.o l-monst.o l-object.o l-player.o l-random.o l-ui.o l-misc.o l-spell.o l-dynamic.o \
	$(LUAOBJS)

##
## Following are some "system" definitions
##
## No changes are needed to compile a version that will run on both
## X11 and Curses, in debugging mode, with maximal warnings, on many
## normal Unix machines of the Sun OS variety (non-solaris).
##
## To use an "alternative" definition, simply "modify" (or "replace")
## the definition below with one that you like.  For example, you can
## change the compiler to "cc", or remove the "debugging" options, or
## remove the X11 or Curses support, etc, as desired.
##
## With X11, XAW or GTK, you can add -D"USE_XPJ" to CFLAGS to get the
## 3d-projection module "xpj".
##
## See also "config.h" and "h-config.h" for important information.
##
## Some "examples" are given below, they can be used by simply
## removing the FIRST column of "#" signs from the "block" of lines
## you wish to use, and commenting out "standard" block below.
##

# This is your compiler - gcc is normal, with a default level of warnings.
CC = gcc
OPTIMISATION = -O2 -fno-strength-reduce
WARNINGS = -Wall

## OPTION: Use gcc 3.1 with extraneous warning options
##         Uncomment the following lines to enable it.
#
# CC = gcc-3.1
# WARNINGS = -pedantic -W -Wmissing-prototypes -Wmissing-declarations \
# 	-Wwrite-strings -Wpointer-arith -Wbad-function-cast -Wsign-compare \
# 	-Waggregate-return -Wstrict-prototypes -Wredundant-decls \
# 	-Wdisabled-optimization -Wall

## OPTION: Compile for Dec ALPHA OSF/1 v2.0.  Uncomment the following line
##         to enable this.
#
# CC = cc
# CFLAGS += -std -g3 -Olimit 4000
# LIBS += -lrpcsvc

## OPTION: Use TCC (Tiny CC).  Uncomment the following lines to enable this.
##         Note that TCC has only been tested with USE_GCU.
#
# CC = tcc
# OPTIMISATION = 
# WARNINGS =

## OPTION: Enable debugging in the compiler.  Comment out the following
##         line if you do not want debugging information in the
##         executable.
#
DEBUGGING = -g

## OPTION: The system which Nangband is being run on has mkstemp().
##         This is default; if you get errors including "mkstemp()",
##         comment out the following line.
#
EXTRAS += -DHAVE_MKSTEMP

## OPTION: Allow the borg.
##         Uncomment the following line to enable it.
#
# ALLOW_BORG = true

#
# Default target; this is one of "x11-gcu", "only-x11", "only-gcu",
#                 "gtk", or "s-lang".
#
default: x11-gcu

#
# This version supports both X11 and curses in a single executable.
#
# To compile, use the "x11-gcu" target.
#
# You may have to replace "-lcurses" with "-lncurses" to use the
# "new curses" library instead of the "old curses" library, and
# you may have to add "-I/usr/include/ncurses" to the "CFLAGS".
#
x11-gcu: CFLAGS += -I/usr/X11R6/include -I/usr/include/ncurses \
         -DUSE_X11 -DUSE_GCU -DUSE_NCURSES
x11-gcu: LIBS += -L/usr/X11R6/lib -lX11 -lncurses
x11-gcu: nangband

#
# This version supports only X11.
#
# To compile, use the "only-x11" target.
#
only-x11: CFLAGS += -DUSE_X11
only-x11: LIBS += -L/usr/X11R6/lib -lX11
only-x11: nangband

#
# This version supports only curses.
#
# To compile, use the "only-gcu" target.
#
# You may have to replace "-lcurses" with "-lncurses" to use the
# "new curses" library instead of the "old curses" library, and
# you may have to add "-I/usr/include/ncurses" to the "CFLAGS".
#
only-gcu: CFLAGS += -D"USE_GCU"
only-gcu: LIBS += -lncurses -ltermcap
only-gcu: nangband

#
# This version supports X11, GTK and curses in a single executable.
#
# To compile, use the "gtk" target.
#
# You may have to replace "-lcurses" with "-lncurses" to use the
# "new curses" library instead of the "old curses" library, and
# you may have to add "-I/usr/include/ncurses" to the "CFLAGS".
#
# `gtk-config *` takes care of the GTK/X11 includes.
#
gtk: CFLAGS += `gtk-config --cflags` -DUSE_GTK -DUSE_GCU -DUSE_X11
gtk: LIBS += `gtk-config --libs` -lcurses -ltermcap
gtk: nangband

##
## Variation -- Use "main-xaw.c" instead of "main-x11.c"
##
#CFLAGS += -D"USE_XAW" -D"USE_GCU"
#LIBS += -lXaw -lXmu -lXt -lX11 -lcurses -ltermcap

##
## Variation -- Use "main-cap.c" instead of "main-gcu.c"
##
#CFLAGS += -D"USE_X11" -D"USE_CAP"
#LIBS += -lX11 -ltermcap


##
## Variation -- Only work on simple vt100 terminals
##
#CFLAGS += -D"USE_CAP" -D"USE_HARDCODE"


##
## Variation -- compile for Linux
##
## Allows the use of Angband in the console using curses.
##
#CFLAGS +=  -D"USE_GCU"
#LIBS += -lcurses


##
## Variation -- compile for Linux
##
## Allows the use of Angband in X11 using the Athena Widget set.
##
#CFLAGS +=  -D"USE_XAW"
#LIBS += -L/usr/X11R6/lib -lXaw -lXext -lSM -lICE -lXmu -lXt -lX11


##
## Variation -- this might work better than the suggestion above
##
#CFLAGS += -I/usr/include/ncurses \
#          -fomit-frame-pointer \
#         -D"USE_X11" -D"USE_GCU" \
#         -D"USE_TPOSIX" -D"USE_CURS_SET"
#LIBS += -lX11 -lncurses
#LDFLAGS = -s


##
## Variation -- compile for Solaris
##
#CFLAGS += -D"USE_X11" -D"USE_GCU" -D"SOLARIS"
#LIBS += -lX11 -lsocket -lcurses


##
## Variation -- compile for SGI Indigo runnig Irix
##
#CFLAGS += -D"USE_X11" -D"USE_GCU" -D"SGI"
#LIBS += -lX11 -lcurses -ltermcap -lsun

##
## Variation -- compile for Interactive Unix (ISC) systems
##
#CFLAGS += -D"USE_X11" -D"USE_GCU" -D"ISC"
#LIBS += -lX11 -lcurses -lnsl_s -linet -lcposix


##
## Variation -- Support fat binaries under NEXTSTEP
##
#CFLAGS += -D"USE_GCU" -arch m68k -arch i386
#LIBS += -lcurses -ltermcap


##
## Variation -- Support Linux + SVGA library
##
#CFLAGS +=  -D"USE_LSL"
#LIBS += -lz -lvgagl -lvga


#
# This version supports linux VCS (Virtual ConSole memory).
#
# To compile, use the "vcs" target.
#
# Note that this module is not well-tested.
#
vcs: CFLAGS +=  -D"USE_VCS"
vcs: LIBS +=

#
# This version supports S-Lang.
#
# To compile, use the "s-lang" target.
#
s-lang: CFLAGS +=  -D"USE_SLA" -I/usr/include/slang
s-lang: LIBS += -lslang


#
# Dependency rules
#

ifdef HAVE_MKSTEMP
nangband: CFLAGS += $(HAVE_MKSTEMP)
nangband: LINKFLAGS += $(HAVE_MKSTEMP)
endif

ifdef WARNINGS
nangband: CFLAGS += $(WARNINGS)
nangband: LINKFLAGS += $(WARNINGS)
endif

ifdef ALLOW_BORG
nangband: CFLAGS += $(ALLOW_BORG)
nangband: LINKFLAGS += $(ALLOW_BORG)
nangband: ANGOBJS += $(BORGOBJS)
endif

ifdef DEBUGGING
nangband: CFLAGS += $(DEBUGGING)
nangband: LINKFLAGS += $(DEBUGGING)
endif

nangband: lua/tolua $(ANGOBJS)
	$(CC) $(CFLAGS) $(LIBS) $(LINKFLAGS) $(LDFLAGS) -o nangband $(ANGOBJS)

lua/tolua: $(TOLUAOBJS)
	$(CC) -o lua/tolua $(TOLUAOBJS) $(LDFLAGS) $(LUALIBS)

#
# Various targets.
#

# Remove the binary
rmbin:; -rm -f ../nangband nangband

# Move the binary one level up.
install: nangband; cp nangband ../

# Clean up object files (and auto-generated files)
clean:; -rm -f *.o nangband lua/*.o ./lua/tolua

#
# Headers used for dependencies
#

HDRS = \
  h-basic.h \
  h-define.h h-type.h h-system.h h-config.h

INCS = \
  angband.h \
  config.h defines.h types.h externs.h \
  z-term.h z-rand.h z-util.h z-virt.h z-form.h $(HDRS)

#
# Dependency information
#

birth.o: birth.c $(INCS)
cave.o: cave.c $(INCS)
cmd1.o: cmd1.c $(INCS)
cmd2.o: cmd2.c $(INCS)
cmd3.o: cmd3.c $(INCS)
cmd4.o: cmd4.c $(INCS)
cmd5.o: cmd5.c $(INCS) script.h
cmd6.o: cmd6.c $(INCS) script.h
dungeon.o: dungeon.c $(INCS)
files.o: files.c $(INCS)
generate.o: generate.c $(INCS)
init1.o: init1.c $(INCS) init.h
init2.o: init2.c $(INCS) init.h script.h
l-misc.o: l-misc.c $(INCS) lua/tolua.h
l-monst.o: l-monst.c $(INCS) lua/tolua.h
l-object.o: l-object.c $(INCS) lua/tolua.h
l-player.o: l-player.c $(INCS) lua/tolua.h
l-random.o: l-random.c $(INCS) lua/tolua.h
l-spell.o: l-spell.c $(INCS) lua/tolua.h
l-ui.o: l-ui.c $(INCS) lua/tolua.h
load.o: load.c $(INCS)
maid-x11.o: maid-x11.c $(INCS) maid-x11.h
main-cap.o: main-cap.c $(INCS) main.h
main-gcu.o: main-gcu.c $(INCS) main.h
main-gtk.o: main-gtk.c $(INCS) main.h maid-x11.h
main-lsl.o: main-lsl.c $(INCS) main.h
main-sla.o: main-sla.c $(INCS) main.h
main-vcs.o: main-vcs.c $(INCS) main.h
main-x11.o: main-x11.c $(INCS) main.h maid-x11.h
main-xaw.o: main-xaw.c $(INCS) main.h maid-x11.h
main-xpj.o: main-xpj.c $(INCS) main.h maid-x11.h
main.o: main.c $(INCS) main.h
melee1.o: melee1.c $(INCS)
melee2.o: melee2.c $(INCS)
monster1.o: monster1.c $(INCS)
monster2.o: monster2.c $(INCS)
object1.o: object1.c $(INCS)
object2.o: object2.c $(INCS)
randart.o: randart.c $(INCS) init.h
save.o: save.c $(INCS)
script.o: script.c $(INCS) script.h
spells1.o: spells1.c $(INCS)
spells2.o: spells2.c $(INCS)
store.o: store.c $(INCS)
tables.o: tables.c $(INCS)
use-obj.o: use-obj.c $(INCS)
util.o: util.c $(INCS)
variable.o: variable.c $(INCS)
wizard1.o: wizard1.c $(INCS)
wizard2.o: wizard2.c $(INCS) script.h
xtra1.o: xtra1.c $(INCS) script.h
xtra2.o: xtra2.c $(INCS)
z-form.o: z-form.c $(HDRS) z-form.h z-util.h z-virt.h
z-rand.o: z-rand.c $(HDRS) z-rand.h
z-term.o: z-term.c $(HDRS) z-term.h z-virt.h
z-util.o: z-util.c $(HDRS) z-util.h
z-virt.o: z-virt.c $(HDRS) z-virt.h z-util.h

#
# Build wrappers
#

l-monst.c: lua/tolua l-monst.pkg
	lua/tolua -n monster -o l-monst.c l-monst.pkg

l-object.c: lua/tolua l-object.pkg
	lua/tolua -n object -o l-object.c l-object.pkg

l-player.c: lua/tolua l-player.pkg
	lua/tolua -n player -o l-player.c l-player.pkg

l-random.c: lua/tolua l-random.pkg
	lua/tolua -n random -o l-random.c l-random.pkg

l-ui.c: lua/tolua l-ui.pkg
	lua/tolua -n ui -o l-ui.c l-ui.pkg

l-misc.c: lua/tolua l-misc.pkg
	lua/tolua -n misc -o l-misc.c l-misc.pkg

l-spell.c: lua/tolua l-spell.pkg
	lua/tolua -n spell -o l-spell.c l-spell.pkg

